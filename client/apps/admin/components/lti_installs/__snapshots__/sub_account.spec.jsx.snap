// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render nested accounts and active matches the snapshot 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <li
    className="c-filter__item"
>
    <button
        onClick={[Function]}
    >
        <i
            className="i-dropdown"
        />
        account_name
    </button>
</li>,
  "nodes": Array [
    <li
      className="c-filter__item"
>
      <button
            onClick={[Function]}
      >
            <i
                  className="i-dropdown"
            />
            account_name
      </button>
</li>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <SubAccount
        account={
                Object {
                        "id": 1,
                        "name": "account_name",
                        "parent_account_id": null,
                      }
        }
        accounts={
                Object {
                        "1": Object {
                          "id": 1,
                          "name": "account_name",
                          "parent_account_id": null,
                        },
                        "2": Object {
                          "id": 1,
                          "name": "account_name1",
                          "parent_account_id": 1,
                        },
                        "3": Object {
                          "id": 2,
                          "name": "account_name2",
                          "parent_account_id": 1,
                        },
                      }
        }
        currentAccount={
                Object {
                        "id": 1,
                      }
        }
        setAccountActive={[Function]}
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": SubAccount {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "account": Object {
            "id": 1,
            "name": "account_name",
            "parent_account_id": null,
          },
          "accounts": Object {
            "1": Object {
              "id": 1,
              "name": "account_name",
              "parent_account_id": null,
            },
            "2": Object {
              "id": 1,
              "name": "account_name1",
              "parent_account_id": 1,
            },
            "3": Object {
              "id": 2,
              "name": "account_name2",
              "parent_account_id": 1,
            },
          },
          "currentAccount": Object {
            "id": 1,
          },
          "setAccountActive": [Function],
        },
        "refs": Object {},
        "state": Object {
          "open": false,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <li
          className="c-filter__item"
>
          <button
                    onClick={[Function]}
          >
                    <i
                              className="i-dropdown"
                    />
                    account_name
          </button>
</li>,
        "_debugID": 2,
        "_renderedOutput": <li
          className="c-filter__item"
>
          <button
                    onClick={[Function]}
          >
                    <i
                              className="i-dropdown"
                    />
                    account_name
          </button>
</li>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <SubAccount
    account={
        Object {
            "id": 1,
            "name": "account_name",
            "parent_account_id": null,
          }
    }
    accounts={
        Object {
            "1": Object {
              "id": 1,
              "name": "account_name",
              "parent_account_id": null,
            },
            "2": Object {
              "id": 1,
              "name": "account_name1",
              "parent_account_id": 1,
            },
            "3": Object {
              "id": 2,
              "name": "account_name2",
              "parent_account_id": 1,
            },
          }
    }
    currentAccount={
        Object {
            "id": 1,
          }
    }
    setAccountActive={[Function]}
/>,
}
`;
